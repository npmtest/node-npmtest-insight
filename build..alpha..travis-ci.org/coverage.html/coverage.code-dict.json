{"/home/travis/build/npmtest/node-npmtest-insight/test.js":"/* istanbul instrument in package npmtest_insight */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-insight/lib.npmtest_insight.js":"/* istanbul instrument in package npmtest_insight */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_insight = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_insight = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-insight/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-insight && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_insight */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_insight\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_insight.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_insight.rollup.js'] =\n            local.assetsDict['/assets.npmtest_insight.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_insight.__dirname + '/lib.npmtest_insight.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-insight/node_modules/insight/lib/index.js":"'use strict';\nvar path = require('path');\nvar fork = require('child_process').fork;\nvar osName = require('os-name');\nvar Configstore = require('configstore');\nvar chalk = require('chalk');\nvar assign = require('object-assign');\nvar debounce = require('lodash.debounce');\nvar inquirer = require('inquirer');\nvar uuid = require('uuid');\nvar providers = require('./providers');\n\nfunction Insight(options) {\n\toptions = options || {};\n\toptions.pkg = options.pkg || {};\n\n\t// deprecated options\n\t// TODO: remove these at some point in the future\n\tif (options.packageName) {\n\t\toptions.pkg.name = options.packageName;\n\t}\n\n\tif (options.packageVersion) {\n\t\toptions.pkg.version = options.packageVersion;\n\t}\n\n\tif (!options.trackingCode || !options.pkg.name) {\n\t\tthrow new Error('trackingCode and pkg.name required');\n\t}\n\n\tthis.trackingCode = options.trackingCode;\n\tthis.trackingProvider = options.trackingProvider || 'google';\n\tthis.packageName = options.pkg.name;\n\tthis.packageVersion = options.pkg.version || 'undefined';\n\tthis.os = osName();\n\tthis.nodeVersion = process.version;\n\tthis.appVersion = this.packageVersion;\n\tthis.config = options.config || new Configstore('insight-' + this.packageName, {\n\t\tclientId: options.clientId || Math.floor(Date.now() * Math.random())\n\t});\n\tthis._queue = {};\n\n\tthis._permissionTimeout = 30;\n}\n\nObject.defineProperty(Insight.prototype, 'optOut', {\n\tget: function () {\n\t\treturn this.config.get('optOut');\n\t},\n\tset: function (val) {\n\t\tthis.config.set('optOut', val);\n\t}\n});\n\nObject.defineProperty(Insight.prototype, 'clientId', {\n\tget: function () {\n\t\treturn this.config.get('clientId');\n\t},\n\tset: function (val) {\n\t\tthis.config.set('clientId', val);\n\t}\n});\n\n// debounce in case of rapid .track() invocations\nInsight.prototype._save = debounce(function () {\n\tvar cp = fork(path.join(__dirname, 'push.js'), {silent: true});\n\tcp.send(this._getPayload());\n\tcp.unref();\n\tcp.disconnect();\n\n\tthis._queue = {};\n}, 100);\n\nInsight.prototype._getPayload = function () {\n\treturn {\n\t\tqueue: assign({}, this._queue),\n\t\tpackageName: this.packageName,\n\t\tpackageVersion: this.packageVersion,\n\t\ttrackingCode: this.trackingCode,\n\t\ttrackingProvider: this.trackingProvider\n\t};\n};\n\nInsight.prototype._getRequestObj = function () {\n\treturn providers[this.trackingProvider].apply(this, arguments);\n};\n\nInsight.prototype.track = function () {\n\tif (this.optOut) {\n\t\treturn;\n\t}\n\n\tvar path = '/' + [].map.call(arguments, function (el) {\n\t\treturn String(el).trim().replace(/ /, '-');\n\t}).join('/');\n\n\t// timestamp isn't unique enough since it can end up with duplicate entries\n\tthis._queue[Date.now() + ' ' + uuid.v4()] = {\n\t\tpath: path,\n\t\ttype: 'pageview'\n\t};\n\tthis._save();\n};\n\nInsight.prototype.trackEvent = function (options) {\n\tif (this.optOut) {\n\t\treturn;\n\t}\n\n\tif (this.trackingProvider !== 'google') {\n\t\tthrow new Error('Event tracking is supported only for Google Analytics');\n\t}\n\tif (!options || !options.category || !options.action) {\n\t\tthrow new Error('category and action required');\n\t}\n\n\t// timestamp isn't unique enough since it can end up with duplicate entries\n\tthis._queue[Date.now() + ' ' + uuid.v4()] = {\n\t\tcategory: options.category,\n\t\taction: options.action,\n\t\tlabel: options.label,\n\t\tvalue: options.value,\n\t\ttype: 'event'\n\t};\n\tthis._save();\n};\n\nInsight.prototype.askPermission = function (msg, cb) {\n\tvar defaultMsg = 'May ' + chalk.cyan(this.packageName) + ' anonymously report usage statistics to improve the tool over time?';\n\n\tcb = cb || function () {};\n\n\tif (!process.stdout.isTTY || process.argv.indexOf('--no-insight') !== -1 || process.env.CI) {\n\t\tsetImmediate(cb, null, false);\n\t\treturn;\n\t}\n\n\tvar permissionTimeout;\n\n\tvar prompt = inquirer.prompt({\n\t\ttype: 'confirm',\n\t\tname: 'optIn',\n\t\tmessage: msg || defaultMsg,\n\t\tdefault: true\n\t}, function (result) {\n\t\t// clear the permission timeout upon getting an answer\n\t\tclearTimeout(permissionTimeout);\n\n\t\tthis.optOut = !result.optIn;\n\t\tcb(null, result.optIn);\n\t}.bind(this));\n\n\t// add a 30 sec timeout before giving up on getting an answer\n\tpermissionTimeout = setTimeout(function () {\n\t\t// stop listening for stdin\n\t\tprompt.close();\n\n\t\t// automatically opt out\n\t\tthis.optOut = true;\n\t\tcb(null, false);\n\t}.bind(this), this._permissionTimeout * 1000);\n};\n\nmodule.exports = Insight;\n","/home/travis/build/npmtest/node-npmtest-insight/node_modules/insight/lib/providers.js":"'use strict';\nvar qs = require('querystring');\n\n/**\n * Tracking providers.\n *\n * Each provider is a function(id, path) that should return\n * options object for request() call. It will be called bound\n * to Insight instance object.\n */\n\nmodule.exports = {\n\t// Google Analytics — https://www.google.com/analytics/\n\tgoogle: function (id, payload) {\n\t\tvar now = Date.now();\n\n\t\tvar _qs = {\n\t\t\t// GA Measurement Protocol API version\n\t\t\tv: 1,\n\n\t\t\t// hit type\n\t\t\tt: payload.type,\n\n\t\t\t// anonymize IP\n\t\t\taip: 1,\n\n\t\t\ttid: this.trackingCode,\n\n\t\t\t// random UUID\n\t\t\tcid: this.clientId,\n\n\t\t\tcd1: this.os,\n\n\t\t\t// GA custom dimension 2 = Node Version, scope = Session\n\t\t\tcd2: this.nodeVersion,\n\n\t\t\t// GA custom dimension 3 = App Version, scope = Session (temp solution until refactored to work w/ GA app tracking)\n\t\t\tcd3: this.appVersion,\n\n\t\t\t// queue time - delta (ms) between now and track time\n\t\t\tqt: now - parseInt(id, 10),\n\n\t\t\t// cache busting, need to be last param sent\n\t\t\tz: now\n\t\t};\n\n\t\t// set payload data based on the tracking type\n\t\tif (payload.type === 'event') {\n\t\t\t_qs.ec = payload.category;\n\t\t\t_qs.ea = payload.action;\n\t\t\tif (payload.label) {\n\t\t\t\t_qs.el = payload.label;\n\t\t\t}\n\t\t\tif (payload.value) {\n\t\t\t\t_qs.ev = payload.value;\n\t\t\t}\n\t\t} else {\n\t\t\t_qs.dp = payload.path;\n\t\t}\n\n\t\treturn {\n\t\t\turl: 'https://ssl.google-analytics.com/collect',\n\t\t\tmethod: 'POST',\n\t\t\t// GA docs recommends body payload via POST instead of querystring via GET\n\t\t\tbody: qs.stringify(_qs)\n\t\t};\n\t},\n\t// Yandex.Metrica - http://metrica.yandex.com\n\tyandex: function (id, payload) {\n\t\tvar request = require('request');\n\n\t\tvar ts = new Date(parseInt(id, 10))\n\t\t\t.toISOString()\n\t\t\t.replace(/[-:T]/g, '')\n\t\t\t.replace(/\\..*$/, '');\n\n\t\tvar path = payload.path;\n\t\tvar qs = {\n\t\t\t'wmode': 3,\n\t\t\t'ut': 'noindex',\n\t\t\t'page-url': 'http://' + this.packageName + '.insight' + path + '?version=' + this.packageVersion,\n\t\t\t'browser-info': 'i:' + ts + ':z:0:t:' + path,\n\t\t\t// cache busting\n\t\t\t'rn': Date.now()\n\t\t};\n\n\t\tvar url = 'https://mc.yandex.ru/watch/' + this.trackingCode;\n\n\t\t// set custom cookie using tough-cookie\n\t\tvar _jar = request.jar();\n\t\tvar cookieString = 'name=yandexuid; value=' + this.clientId + '; path=/;';\n\t\tvar cookie = request.cookie(cookieString);\n\t\t_jar.setCookie(cookie, url);\n\n\t\treturn {\n\t\t\turl: url,\n\t\t\tmethod: 'GET',\n\t\t\tqs: qs,\n\t\t\tjar: _jar\n\t\t};\n\t}\n};\n"}